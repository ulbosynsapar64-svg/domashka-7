package shablon.lab;

import java.util.*;

// ============================================================
// STRATEGY PATTERN ‚Äî –¢”®–õ–ï–ú ”ò–î–Ü–°–¢–ï–†–Ü
// ============================================================

interface IPaymentStrategy {
    void pay(double amount);
}

class CreditCardPayment implements IPaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("üí≥ –ë–∞–Ω–∫—Ç—ñ–∫ –∫–∞—Ä—Ç–∞–º–µ–Ω —Ç”©–ª–µ–º –∂–∞—Å–∞–ª–¥—ã: " + amount + " ‚Ç∏");
    }
}

class PayPalPayment implements IPaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("üíª PayPal –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂–∞—Å–∞–ª–¥—ã: " + amount + " ‚Ç∏");
    }
}

class CryptoPayment implements IPaymentStrategy {
    @Override
    public void pay(double amount) {
        System.out.println("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂–∞—Å–∞–ª–¥—ã: " + amount + " ‚Ç∏");
    }
}

class PaymentContext {
    private IPaymentStrategy strategy;

    public void setStrategy(IPaymentStrategy strategy) {
        this.strategy = strategy;
    }

    public void executePayment(double amount) {
        if (strategy == null) {
            System.out.println("‚ö† –¢”©–ª–µ–º ”ô–¥—ñ—Å—ñ —Ç–∞“£–¥–∞–ª–º–∞“ì–∞–Ω!");
        } else {
            strategy.pay(amount);
        }
    }
}

class StrategyDemo {
    public static void run() {
        Scanner sc = new Scanner(System.in);
        PaymentContext context = new PaymentContext();

        System.out.println("\n=== STRATEGY PATTERN ===");
        System.out.println("1 - –ë–∞–Ω–∫—Ç—ñ–∫ –∫–∞—Ä—Ç–∞");
        System.out.println("2 - PayPal");
        System.out.println("3 - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞");

        System.out.print("–¢”©–ª–µ–º ”ô–¥—ñ—Å—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑ (1-3): ");
        int choice = sc.nextInt();

        System.out.print("–°–æ–º–∞–Ω—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑: ");
        double amount = sc.nextDouble();

        switch (choice) {
            case 1 -> context.setStrategy(new CreditCardPayment());
            case 2 -> context.setStrategy(new PayPalPayment());
            case 3 -> context.setStrategy(new CryptoPayment());
            default -> {
                System.out.println("‚ö† –ú“±–Ω–¥–∞–π –Ω“±—Å“õ–∞ –∂–æ“õ!");
                return;
            }
        }

        context.executePayment(amount);
        sc.close();
    }
}

// ============================================================
// OBSERVER PATTERN ‚Äî –í–ê–õ–Æ–¢–ê –ö–£–†–°–´–ù –ë–ê“ö–´–õ–ê–£
// ============================================================

interface IObserver {
    void update(double usdRate);
}

interface ISubject {
    void attach(IObserver observer);
    void detach(IObserver observer);
    void notifyObservers();
}

class CurrencyExchange implements ISubject {
    private List<IObserver> observers = new ArrayList<>();
    private double usdRate;

    public void setUsdRate(double rate) {
        this.usdRate = rate;
        System.out.println("\n–í–∞–ª—é—Ç–∞ –±–∞“ì–∞–º—ã ”©–∑–≥–µ—Ä–¥—ñ: 1 USD = " + rate + " ‚Ç∏");
        notifyObservers();
    }

    @Override
    public void attach(IObserver observer) {
        observers.add(observer);
    }

    @Override
    public void detach(IObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (IObserver obs : observers) {
            obs.update(usdRate);
        }
    }
}

class MobileAppDisplay implements IObserver {
    @Override
    public void update(double usdRate) {
        System.out.println("–ú–æ–±–∏–ª—å–¥—ñ “õ–æ—Å—ã–º—à–∞: USD –±–∞“ì–∞–º—ã –∂–∞“£–∞—Ä–¥—ã ‚Äî " + usdRate + " ‚Ç∏");
    }
}

class WebsiteDisplay implements IObserver {
    @Override
    public void update(double usdRate) {
        System.out.println("–í–µ–±-—Å–∞–π—Ç—Ç–∞ –∂–∞“£–∞ –∫—É—Ä—Å: " + usdRate + " ‚Ç∏");
    }
}

class EmailNotifier implements IObserver {
    @Override
    public void update(double usdRate) {
        System.out.println("Email —Ö–∞–±–∞—Ä–ª–∞–º–∞: USD –±–∞“ì–∞–º—ã " + usdRate + " ‚Ç∏ –±–æ–ª—ã–ø ”©–∑–≥–µ—Ä–¥—ñ.");
    }
}

class ObserverDemo {
    public static void run() {
        CurrencyExchange exchange = new CurrencyExchange();

        IObserver app = new MobileAppDisplay();
        IObserver site = new WebsiteDisplay();
        IObserver email = new EmailNotifier();

        exchange.attach(app);
        exchange.attach(site);
        exchange.attach(email);

        exchange.setUsdRate(478.25);
        exchange.setUsdRate(481.50);

        exchange.detach(site);
        exchange.setUsdRate(485.75);
    }
}

// ============================================================
// MAIN ‚Äî –ü–ê–ô–î–ê–õ–ê–ù–£–®–´ “Æ–®–Ü–ù –ú–ï–ù–Æ
// ============================================================

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("=== –î–ò–ó–ê–ô–ù –ü–ê–¢–¢–ï–†–ù–î–ï–† –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø–°–´ ===");
        System.out.println("1 - Strategy (–¢”©–ª–µ–º –∂“Ø–π–µ—Å—ñ)");
        System.out.println("2 - Observer (–í–∞–ª—é—Ç–∞–ª—ã“õ –∫—É—Ä—Å)");
        System.out.print("–¢–∞“£–¥–∞“£—ã–∑ (1 –Ω–µ–º–µ—Å–µ 2): ");

        int choice = sc.nextInt();

        switch (choice) {
            case 1 -> StrategyDemo.run();
            case 2 -> ObserverDemo.run();
            default -> System.out.println("“ö–∞—Ç–µ —Ç–∞“£–¥–∞—É!");
        }

        sc.close();
    }
}